// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/delete/{id}": {
            "delete": {
                "description": "Удаляет пользователя по ID из URL",
                "tags": [
                    "users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/update/{id}": {
            "put": {
                "description": "Обновляет пользователя по ID из URL, новые данные берутся из тела запроса",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Обновление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated successfully",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Bad request",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict: new email already in use",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Отдает массив из всех пользователей базы",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Хендлер для получения списка всех юзеров из базы",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Создаёт нового пользователя из данных в теле запроса",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Хендлер для создания нового пользователя",
                "parameters": [
                    {
                        "description": "User info",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Incomplete data input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Email conflict: already in use",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id1}/make_friend/{id2}": {
            "post": {
                "description": "Создаёт новую связь между 2мя существующими пользователями",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "friendship"
                ],
                "summary": "Хендлер для создания новой связи - дружбы",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id 1 - friendship requester",
                        "name": "id1",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User id 2 - friendship acceptor",
                        "name": "id2",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully added a new friend",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "One or both users don't exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id1}/remove_friend/{id2}": {
            "delete": {
                "description": "Удаляет существующую связь между 2мя пользователями, id обоих берутся из URL",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "friendship"
                ],
                "summary": "Удаление существующей связи - дружбы",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id 1 - friendship requester",
                        "name": "id1",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "User id 2 - friendship acceptor",
                        "name": "id2",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "400": {
                        "description": "Invalid data input",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "One or both users don't exist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Возвращает пользователя в формате JSON по ID из URL",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Получение пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.User"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/users/{id}/friends": {
            "get": {
                "description": "Возвращает массив JSON из пользователей, которые состоят в связи с указанным в запросе пользователем",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "friendship"
                ],
                "summary": "Получение списка друзей пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User id - friendship requester",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful load of friends list",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.Friendship": {
            "type": "object",
            "properties": {
                "accepter": {
                    "$ref": "#/definitions/model.User"
                },
                "accepterID": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "requester": {
                    "$ref": "#/definitions/model.User"
                },
                "requesterID": {
                    "type": "integer"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "friendOf": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Friendship"
                    }
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Friendship"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Users API",
	Description:      "REST API для управления пользователями и друзьями",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
